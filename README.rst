 Structural Calibration with Sparse Data
==========================================================================================================
This repository is used to calibrate the underlying structure of a stylized supply chain simulation model of counterfeit Personal Protective Equipment (PPE). For this, we use four calibration techniques:
Approximate Bayesian Computing using ``pydream``, Bayesian Optimization using ``bayesian-optimization``, Genetic Algorithms using ``Platypus``, and Powell's Method using ``SciPy``. The calibration is done with sparse data, which is generated by degrading the ground truth data on noise, bias, and missing values.
We define the structure of a supply chain simulation model as a key value of a dictionary (sorted on betweenness centrality), which is a set of possible supply chain models. The integer is, thus, the decision variable of the calibration.

To use this repository, we need a simulation model developed in `pydsol-core <https://github.com/averbraeck/pydsol-core>`_ and `pydsol-model <https://github.com/imvs95/pydsol-model>`_ . Additionally, we need a dictionary with various different simulation structures as input, as well as the ground truth data.
For this project, we use the repository `complex_stylized_supply_chain_model_generator <https://github.com/imvs95/complex_stylized_supply_chain_model_generator>`_ as simulation model.

This repository is an extension of the ``celibration`` library, making it easy to plugin different calibration models, distance metrics and functions, and data.

This repository is also part of the Ph.D. thesis of  `Isabelle M. van Schilt <https://www.tudelft.nl/staff/i.m.vanschilt/?cHash=74e749835b2a89c6c76b804683ffbbcf>`_, Delft University of Technology. The version of the code used in the Ph.D. thesis is available at doi: `10.4121/2a2a2677-4f73-4bd9-ac0d-e28099c3cc26.v1 <https://doi.org/10.4121/2a2a2677-4f73-4bd9-ac0d-e28099c3cc26.v1>`_.

Content
=====================================================
The calibration techniques can be found in ``celibration/plugins/calibrationmodels`` folder. The calibration difference function, so the objective value, can be found in ``celibration/plugins/calibrationfunctions`` folder.
The code to transform the data (sparseness and pre/post processing) can be found in ``celibration/plugins/datatransforms`` folder.

The ``structure_experiments`` folder contains the plans to run the calibration, including a small test for all models. Results of the calibration are saved in the `reports` folder.

The results for the Ph.D. thesis are presented in the ``thesis_results`` folder, including the visualizations. We present the convergence, the quality-of-fit, and the graph edit distance using `GMatch4py <https://github.com/jacquesfize/GMatch4py>`_.

Run the Calibration
=====================================================
To run the calibration, we use the ``run.py`` script. As input of the script, use a .yml plan. For example::

    --plan structure_experiments/hpc_test_all_models.yml -mp -r

This runs the small sample test with multiprocessing (-mp) and saves the results (-r) in the reports folder.


Installing Requirements
=====================================================
Use the *requirements.txt* and *requirements_2.txt* file to install the required packages. To install the packages, use the following command::

    pip install -r requirements.txt

For installing ``pydream``, please use the fork of the repository of Isabelle van Schilt (this includes the acceptance rate). See `https://github.com/imvs95/PyDREAM <https://github.com/imvs95/PyDREAM>`_.
For installing ``bayesian-optimization``, please also use the fork of the repository of Isabelle van Schilt. See `https://github.com/imvs95/BayesianOptimization <https://github.com/imvs95/BayesianOptimization>`_.



